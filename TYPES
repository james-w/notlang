Types
-----

Here are some thoughts about types.

Variables can only hold a single type during their lifetime, basically to make
inference easier. This isn't generally a huge cost to the developer. What
stops that type being ANY though? Being used in a way that needs something more
specific. (Assigned but never used variables may be ANY.)

Basic inference.
----------------

Types don't have to be specified for a variable, they are inferred from the
way a variable is used.

Perhaps they can be specified if the developer wishes.

When a variable is used in an expression, then types are inferred from how
it is used.

  a = 1

infers that a is an int.

There will be a hierarchy of types. A type inference can be expanded as
needed up a hierarchy. e.g.

  a = 1
  a = 1.0

will change the inference when it sees the second declaration.


There are two contributors to constraints:

  1. Use: when a variable is used then its type is constrained by the
     way that it is used. Passing it to a function means that it must
     be a subtype of the relevant argument type. This restricts the
     types that the variable can hold.

  2. Definition: when a variable is defined, or updated, then it
     changes the type that the variable may hold. This causes an
     expansion in the possible types.

We need to find a type scheme that satisfies all of these constraints
at the same time.


Type checking
-------------

Consider

def f(a:int):
   return a.tofloat()

If we aren't going to require declarations everwhere, then what do we do
when this is called with something we can't guarantee to be an int? We
can be like Python and let it through, and allow duck-typing to work.

We could also inject runtime type checks on this function.

Would it be possible to omit the type checks if we could guarantee that
the function was never called with anything other than an int? What about
public modules? The code could be called with anything.

Is there much point in allowing the duck typing? If you try and call without
an int and the type checker notices it will complain. Maybe a way to force
past the type check is needed?

Type classes
------------

Type classes/traits are great. It would be really nice to be able
to use them.

type Foo:
   trait File:
      def readline():
          ...

The type checker has to check that you implement all of the trait in your
block.

You can then call the method from a particular trait with

   f.File:readline()

and

   f.readline()

might work fine as long as there were no conflicts (run time error?).
The full name could be inferred from surrounding type declarations, so

  def foo(a: File):
      a.readline()

could be rewritten to a.File:readline() internally.

Case on types
-------------

I'd really like to copy Maybe, Either etc. from Haskell, and use that
for error handling as much as possible. I'm not sure what the syntax
is though, but it probably involves "case".

   def getline(f):
      line = f.File:readline()
      case line:
          Error e:
              sys.stderr.write(e)
              return Maybe.None()
          Ok line:
              print(line)
              return Maybe.Just(line)

getline is then (File => f) -> Maybe str
File:readline would be something like (File => f) --> MaybeError str

The type checker could then enforce that you use the full expansion in the
case block, but may not be necessary with just type checking on
what is done with the value.

How do you define a type such as this?

Maybe = new Enum<A>(None, Just(A)):

    def is_none(self):
        case self:
            None:
                return True
            Just a:
                return False


Type checking attribute access
------------------------------

When an attribute is accessed on something, we want to:

  1 generate a type variable for the type of the attribute
  2 check that the object has that attribute
  3 check that the type of the attribute matches the way that it is used

To do this:

  1 is quite easy.
  2 we can do with a constraint. (type(attr), SUBTYPE_OF, hasattr(type(obj), name))
    - Then when satisfying constraints we need to consider this new hasattr case.
  3 we can do this by replacing the hasattr constraint with one on the types.

There may be some post-processing needed if there are any hasattr() in the substitution?

Handling assignment
-------------------

Assignment is an extension to the basic HM algorithm.

Consider

  a = 1
  a = "a"
  foo(a)

This is fine as long as foo() acts on any type, or
on a string.

There are three ways to consider this.

  1. The first assignment makes the variable an int.
     The second assignment is illegal. This would be
     ok, but makes e.g. enums a bit tricky as it wouldn't
     widen from Maybe.Just(A) to Maybe as needed.

  2. The two assignments unify to their most specific
     common type, here Type or something. This restricts
     the ability of the developer to re-use vars in perfectly
     legal ways, but wouldn't be too onerous. The bigger
     problem is that the current algorithm can't go back
     and change its mind about the type of the var
     during constraint solving.

  3. The type of the var is int after the first assignment,
     and str after the second. Everything that satisfies that
     is legal. This is natural to e.g. Python developers.
     The complications are firstly that branches can
     create union types, so after a branch recombines the
     checker needs to decide whether we made a union type.
     The second complication is that the question "what type
     is this variable" doesn't have a simple answer, but
     that's not much of a concern, as it's usually pretty
     obvious. It would be possible to reconstruct the
     types of a variable across its lifetime by storing
     enough information.

I chose option 3. The fact that it maps naturally to
what developers expect is good, and that it makes variables
have variable types is natural.

This is implemented by not having TypeExpr()s for variables,
just remembering what they were set to last, and returning
that whenever the variable is referenced.

After a branch recombines, e.g. after an if, there is an
algorithm that decides which variables are in scope, and
what their type is, making a union type if needed. This means
that

if True:
    foo = 1
print(foo)

raises a NameError when foo is printed, as it may not be
in scope, but

if True:
    foo = 1
else:
    foo = 2
print(foo)

is fine as the variable will always be defined. Extending
to loops, elif and cases is harder though, as it needs
coverage analysis, so sometimes a variable will have to
pre-defined even if the developer knows that it will always
have a value after a branch.

References
----------

  * http://adam.gundry.co.uk/pub/type-inference-in-context/type-inference-2010-07-30.pdf
  * http://www.cs.berkeley.edu/~fateman/264/papers/sas94.pdf
  * http://okmij.org/ftp/ML/generalization.html
  * http://dev.stephendiehl.com/fun/006_hindley_milner.html#types
  * http://cs.brown.edu/courses/cs173/2012/book/types.html#%28part._.Type_.Inference%29
  * http://web.cecs.pdx.edu/~mpj/thih/
