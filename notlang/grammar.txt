DECIMAL: "-?0|[1-9][0-9]*";
OPERATOR: "[-+*]";
TYPE_PARAM_START: "<";
TYPE_PARAM_END: ">";
COMPARATOR: "(==)";
IDENTIFIER: "[a-zA-Z_][a-zA-Z0-9_]*";
IGNORE: "[ \t]";
NEWLINE: "\n";

main: >newline_or_statement<*  [EOF];

newline_or_statement: [NEWLINE] | statement;

statement: simple_statement | compound_statement | [NEWLINE];

simple_statement: small_statement [newlines];

compound_statement: conditional | while_loop | funcdef | case;

small_statement: assignment | return_statement | pass;

return_statement: "return" testlist?;

pass: "pass";

assignment: testlist assignment_trailer?;
assignment_trailer: ["="] <testlist> | ["="] new_decl;

testlist: comparison;

newlines: NEWLINE+;

new_decl: "new" >type_type< type_params? type_options? [":" newlines] suite;

type_type: "Type" | "Enum" | "Tuple";

type_params: [TYPE_PARAM_START] type_param [TYPE_PARAM_END];
type_options: "(" type_options_list? [")"];
type_options_list: type_option type_options_list_trailer*;
type_options_list_trailer: [","] <type_option>;
type_option: IDENTIFIER type_option_trailer?;
type_option_trailer: ["("] IDENTIFIER [")"];

comparison: expr comparison_trailer*;

comparison_trailer: comparator_op expr;
comparator_op: <COMPARATOR> | <TYPE_PARAM_START> | <TYPE_PARAM_END>;

expr: arith_expr;

arith_expr: term arith_trailer*;

arith_trailer: OPERATOR term;

term: atom term_trailer*;

term_trailer: <function_call_trailer> | <attribute_trailer>;
function_call_trailer: type_params? "(" arglist? [")"];
attribute_trailer: ["."] IDENTIFIER;

arglist: argument arglist_trailer*;

arglist_trailer: [","] <argument>;

argument: comparison;

conditional: "if" comparison [":"] [newlines] suite else_block?;
else_block: ["else" ":" newlines] suite;

while_loop: "while" comparison [":"] [newlines] suite;

funcdef: "def" IDENTIFIER type_params? parameters rtype_decl? [":"] [newlines] suite;

case: "case" expr [":" newlines] case_block;
case_block: [INDENT] case_case+ [DEDENT];
case_case: normal_case | else_block;
normal_case: expr [":" newlines] suite;

parameters: ["("] defargs? [")"];

defargs: defarg defargs_trailer*;

defargs_trailer: [","] <defarg>;

rtype_decl: ["->"] type_param;

defarg: IDENTIFIER argtypespec?;

argtypespec: [":"] <type_param>;

type_param: IDENTIFIER type_params?;

suite: [INDENT] statement* [DEDENT];

atom: DECIMAL | IDENTIFIER;
