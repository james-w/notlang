DECIMAL: "-?0|[1-9][0-9]*";
OPERATOR: "[-+*]";
COMPARATOR: "(==)|[<>]";
IDENTIFIER: "[a-zA-Z_][a-zA-Z0-9_]*";
IGNORE: "[ \t]";
NEWLINE: "\n";

main: >newline_or_statement<*  [EOF];

newline_or_statement: [NEWLINE] | statement;

statement: simple_statement | compound_statement;

simple_statement: small_statement [NEWLINE]; 

compound_statement: conditional | while_loop | funcdef;

small_statement: assignment | return_statement;

return_statement: ["return"] testlist;

assignment: testlist assignment_trailer?;

assignment_trailer: ["="] <testlist>;

testlist: comparison;

comparison: expr comparison_trailer*;

comparison_trailer: COMPARATOR expr;

expr: arith_expr;

arith_expr: term arith_trailer*;

arith_trailer: OPERATOR term;

term: atom term_trailer?;

term_trailer: ["("] arglist? [")"];

arglist: argument;

argument: comparison;

conditional: "if" comparison [":"] [NEWLINE] suite;

while_loop: ["while"] comparison [":"] [NEWLINE] suite;

funcdef: ["def"] IDENTIFIER ["("] IDENTIFIER [")" ":" NEWLINE] suite;

suite: [INDENT] statement* [DEDENT];

atom: DECIMAL | IDENTIFIER;
